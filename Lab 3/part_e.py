import pandas as pd
import matplotlib.pyplot as plt
import os

# Define sets of file extensions for code and non-code artifacts
code_extensions = {'.py', '.java', '.cpp', '.c', '.h', '.js', '.html', '.css', '.rb', '.php', '.go', '.rs', '.swift', '.kt'}
non_code_extensions = {'.txt', '.md', '.rst', '.docx', '.pdf', '.csv', '.json', '.xml', '.yml', '.yaml'}

# Function to classify a file as code or non-code based on its extension
def classify_file(file_path):
    _, ext = os.path.splitext(file_path.lower())
    if ext in code_extensions:
        return 'Code'
    elif ext in non_code_extensions:
        return 'Non-Code'
    else:
        return 'Unknown'

# Load the dataset from the CSV file generated by pydriller
input_file = "analysisLab3.csv"  # Path to your generated CSV
df = pd.read_csv(input_file)

# Ensure 'new_file_path' is treated as a string and handle missing values
df['new_file_path'] = df['new_file_path'].fillna('unknown').astype(str)

# Classify each file as code or non-code
df['artifact_type'] = df['new_file_path'].apply(classify_file)

# Count 'yes' and 'no' matches for each artifact type
stats = df.groupby(['artifact_type', 'diff_equal']).size().unstack(fill_value=0)

# Ensure both columns ('yes' and 'no') exist before renaming
if 'no' not in stats.columns:
    stats['no'] = 0
if 'yes' not in stats.columns:
    stats['yes'] = 0

# Rename columns for clarity
stats = stats.rename(columns={'no': 'No Matches', 'yes': 'Matches'})

# Plot the results
stats.plot(kind='bar', figsize=(8, 6), width=0.6)
plt.title('Matches vs. No Matches for Code and Non-Code Artifacts')
plt.xlabel('Artifact Type')
plt.ylabel('Number of Instances')
plt.xticks(rotation=0)
plt.legend(title='Category')
plt.tight_layout()

# Save and display the plot
plt.savefig('detailed_artifact_match_statistics_pydriller.png')
plt.show()
